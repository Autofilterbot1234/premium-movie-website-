import os
import logging
import threading
import asyncio
from urllib.parse import quote_plus

# --- Selenium Imports ---
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# --- Pyrogram Imports ---
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.errors import UserNotParticipant

# --- Flask Imports for Web Service ---
from flask import Flask
from werkzeug.serving import make_server

# --- Logging Configuration ---
# ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


# --- Environment Variable Configuration ---
# Render/Heroku ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
try:
    API_ID = int(os.environ.get("API_ID"))
    API_HASH = os.environ.get("API_HASH")
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
    
    # Render ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá PORT ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá
    PORT = int(os.environ.get("PORT", "8080"))

    # ‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤
    FORCE_SUB_CHANNEL_USERNAME = os.environ.get("FORCE_SUB_CHANNEL_USERNAME", None)
    ADMIN_ID = os.environ.get("ADMIN_ID", None)
    if ADMIN_ID:
        try:
            ADMIN_ID = int(ADMIN_ID)
        except ValueError:
            logger.warning("ADMIN_ID environment variable is not a valid integer. Ignoring.")
            ADMIN_ID = None

except (TypeError, ValueError) as e:
    logger.critical(f"‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: API_ID, API_HASH, BOT_TOKEN ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡¶®‡¶ø‡•§ Error: {e}")
    exit(1)
except Exception as e:
    logger.critical(f"‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: {e}")
    exit(1)


# --- Selenium Setup for Render Environment ---
def setup_selenium_driver():
    """Render-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Selenium WebDriver ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶ï‡¶∞‡ßá‡•§"""
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--no-sandbox")
    # Buildpack ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶è‡¶á ‡¶™‡¶æ‡¶•‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü
    chrome_options.binary_location = os.environ.get("GOOGLE_CHROME_BIN")
    
    driver = webdriver.Chrome(executable_path=os.environ.get("CHROMEDRIVER_PATH"), options=chrome_options)
    logger.info("Selenium WebDriver successfully configured.")
    return driver


# --- The Ultimate Scraper Function using Selenium ---
async def scrape_movie_links_from_source(query: str):
    """MLWBD ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßÇ‡¶™ ‡¶∏‡¶æ‡¶á‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ï‡¶∞‡ßá‡•§"""
    links = {}
    driver = None
    try:
        driver = await asyncio.to_thread(setup_selenium_driver)
        # MLWBD-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö URL, ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶≤‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶∏‡¶æ‡¶á‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø
        search_url = f"https://mlwbd.fyi/search/{quote_plus(query)}"
        logger.info(f"Scraping started for query '{query}' at URL: {search_url}")
        driver.get(search_url)

        # ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶´‡¶≤‡¶æ‡¶´‡¶≤‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
        wait = WebDriverWait(driver, 20) # ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá
        first_result_link_element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div.search-item a")))
        movie_page_url = first_result_link_element.get_attribute("href")
        
        logger.info(f"Found movie page: {movie_page_url}")
        driver.get(movie_page_url)

        # ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
        download_buttons = wait.until(EC.presence_of_all_elements_located((By.XPATH, "//a[contains(@class, 'button') or contains(@class, 'btn')]")))
        
        for button in download_buttons:
            text = button.text.lower()
            href = button.get_attribute("href")
            
            # ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶π‡ßç‡¶Ø‡¶ø‡¶ï ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ
            if href and not href.startswith("#") and "mlwbd" not in href:
                resolution = "Link"
                if "1080p" in text: resolution = "1080p"
                elif "720p" in text: resolution = "720p"
                elif "480p" in text: resolution = "480p"
                
                if resolution not in links: # ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶® ‡¶è‡ßú‡¶æ‡¶®‡ßã
                    links[resolution] = href
                    logger.info(f"Found link: {resolution} -> {href}")

    except TimeoutException:
        logger.warning(f"Timeout while scraping for '{query}'. The page might be too slow or the structure has changed.")
    except NoSuchElementException:
        logger.warning(f"Could not find required elements for '{query}'. Site design has likely changed.")
    except Exception as e:
        logger.error(f"An unexpected error occurred during scraping: {e}", exc_info=True)
    finally:
        if driver:
            await asyncio.to_thread(driver.quit)
            logger.info("Selenium WebDriver closed.")
            
    return links


# --- Pyrogram Bot and Flask App Initialization ---
app = Client("ultimate_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
flask_app = Flask(__name__)

@flask_app.route('/')
def health_check():
    """Render-‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶ü‡¶ø ‡¶∏‡¶ö‡¶≤ ‡¶Ü‡¶õ‡ßá"""
    return "Movie Scraper Bot is alive and running!", 200


# --- Pyrogram Message Handlers ---
@app.on_message(filters.command("start") & filters.private)
async def start_command(client: Client, message: Message):
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    await message.reply_text(
        "üëã **‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!**\n\n"
        "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶¨‡¶ü‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶æ‡¶∞ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡•§\n\n"
        "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®, ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶≤‡¶æ‡¶ó‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§"
    )

@app.on_message(filters.text & filters.private & ~filters.command("start"))
async def search_handler(client: Client, message: Message):
    """‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡¶æ‡ßü"""
    
    # --- ‡¶´‡ßã‡¶∞‡ßç‡¶∏ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶æ‡¶á‡¶¨ ‡¶ö‡ßá‡¶ï ---
    if FORCE_SUB_CHANNEL_USERNAME:
        try:
            member = await client.get_chat_member(chat_id=f"@{FORCE_SUB_CHANNEL_USERNAME}", user_id=message.from_user.id)
            if member.status in [enums.ChatMemberStatus.LEFT, enums.ChatMemberStatus.KICKED]:
                raise UserNotParticipant
        except UserNotParticipant:
            await message.reply_text(
                "‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§\n\n"
                "‡¶¶‡ßü‡¶æ‡¶ï‡¶∞‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üì¢ Join Channel", url=f"https://t.me/{FORCE_SUB_CHANNEL_USERNAME}")]]))
            return
        except Exception as e:
            logger.warning(f"Force sub check failed: {e}")

    query = message.text
    searching_msg = await message.reply_text(f"üîé **`{query}`**-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ö‡¶≤‡¶õ‡ßá...\n\n‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ü‡¶ø ‡ß®‡ß¶-‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ß‡ßà‡¶∞‡ßç‡¶Ø ‡¶ß‡¶∞‡ßÅ‡¶®‡•§")
    
    try:
        links = await scrape_movie_links_from_source(query)
        
        if not links:
            await searching_msg.edit_text(f"**`{query}`**-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ üòü\n\n‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßã‡¶∞‡ßç‡¶∏‡ßá ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶®‡ßá‡¶á ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∏‡¶æ‡¶á‡¶ü‡ßá‡¶∞ ‡¶ó‡¶†‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶è‡¶∏‡ßá‡¶õ‡ßá‡•§")
            return
            
        buttons = []
        sorted_resolutions = sorted(links.keys(), key=lambda x: ('Link' in x, x), reverse=True)
        for res in sorted_resolutions:
            buttons.append([InlineKeyboardButton(f"üé¨ {res}", url=links[res])])

        await searching_msg.edit_text(
            f"**`{query}`**-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá:",
            reply_markup=InlineKeyboardMarkup(buttons),
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"Error in search_handler: {e}", exc_info=True)
        await searching_msg.edit_text("‡¶è‡¶ï‡¶ü‡¶ø ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")


# --- Threading & Main Execution for Web Service ---
class WebServer(threading.Thread):
    def __init__(self, app):
        threading.Thread.__init__(self)
        self.server = make_server('0.0.0.0', PORT, app)
        self.ctx = app.app_context()
        self.ctx.push()

    def run(self):
        logger.info(f"Flask Web Server is starting on port {PORT}")
        self.server.serve_forever()

    def shutdown(self):
        self.server.shutdown()

def run_pyrogram_bot():
    logger.info("Pyrogram bot is starting...")
    app.run()

if __name__ == "__main__":
    web_server_thread = WebServer(flask_app)
    web_server_thread.start()
    
    run_pyrogram_bot()
    
    web_server_thread.shutdown()
