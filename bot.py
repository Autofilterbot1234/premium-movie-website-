import os
import logging
import threading
import asyncio
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.errors import UserNotParticipant

import requests
from bs4 import BeautifulSoup

from flask import Flask
from werkzeug.serving import make_server

# --- Logging Setup ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


# --- Configuration from Environment Variables ---
try:
    API_ID = int(os.environ.get("API_ID"))
    API_HASH = os.environ.get("API_HASH")
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
    
    FORCE_SUB_CHANNEL_USERNAME = os.environ.get("FORCE_SUB_CHANNEL_USERNAME", None)
    ADMIN_ID = int(os.environ.get("ADMIN_ID", 0))
    
    # Render automatically sets the PORT environment variable for Web Services
    PORT = int(os.environ.get("PORT", 8080))

except (TypeError, ValueError) as e:
    logger.critical(f"‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡¶®‡¶ø: {e}")
    exit()

# --- Pyrogram Bot Initialization ---
app = Client("web_server_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)


# --- Flask Web Server Setup ---
# ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶Ø‡¶æ Render-‡¶è‡¶∞ Health Check-‡¶ï‡ßá ‡¶∏‡¶®‡ßç‡¶§‡ßÅ‡¶∑‡ßç‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá
flask_app = Flask(__name__)

@flask_app.route('/')
def health_check():
    """Render-‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶ü‡¶ø ‡¶∏‡¶ö‡¶≤ ‡¶Ü‡¶õ‡ßá"""
    return "‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶ö‡¶≤ ‡¶Ü‡¶õ‡¶ø! ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶ö‡¶≤‡¶õ‡ßá‡•§", 200

# --- Pyrogram Handlers (‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á) ---

@app.on_message(filters.command("start") & filters.private)
async def start_command(client: Client, message: Message):
    await message.reply_text(
        "üëã **‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!**\n\n"
        "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶ü‡ßã‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶¨‡¶ü‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n\n"
        f"Í∞úÎ∞úÏûê: [Developer Name](tg://user?id={ADMIN_ID})"
    )

async def search_movie_links(query: str):
    # ... (‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á) ...
    search_query = f'"{query}" (480p OR 720p OR 1080p) "Google Drive" -site:youtube.com'
    url = f"https://www.google.com/search?q={search_query}"
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
    links = {}
    try:
        response = await asyncio.to_thread(requests.get, url, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        for a_tag in soup.find_all('a', href=True):
            href = a_tag.get('href')
            if href.startswith('/url?q='):
                link = href.split('/url?q=')[1].split('&sa=')[0]
                if 'drive.google.com' in link:
                    text = a_tag.get_text().lower()
                    resolution = "Unknown"
                    if "1080p" in text: resolution = "1080p"
                    elif "720p" in text: resolution = "720p"
                    elif "480p" in text: resolution = "480p"
                    if resolution not in links:
                        links[resolution] = link
                        if len(links) >= 5: break
    except Exception as e:
        logger.error(f"Google search failed: {e}")
    return links

@app.on_message(filters.text & filters.private & ~filters.command("start"))
async def search_handler(client: Client, message: Message):
    # ... (‡¶è‡¶á ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ü‡¶ø‡¶ì ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á) ...
    if FORCE_SUB_CHANNEL_USERNAME:
        try:
            member = await client.get_chat_member(chat_id=f"@{FORCE_SUB_CHANNEL_USERNAME}", user_id=message.from_user.id)
            if member.status in [enums.ChatMemberStatus.LEFT, enums.ChatMemberStatus.KICKED]: raise UserNotParticipant
        except UserNotParticipant:
            await message.reply_text("‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®‡•§", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üì¢ Join Channel", url=f"https://t.me/{FORCE_SUB_CHANNEL_USERNAME}")]]))
            return
        except Exception: pass
    
    query = message.text
    searching_msg = await message.reply_text("üîé **‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ö‡¶≤‡¶õ‡ßá...**")
    try:
        links = await search_movie_links(query)
        if not links:
            await searching_msg.edit_text(f"**`{query}`**-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ üòü")
            return
        buttons = [[InlineKeyboardButton(f"üé¨ {res} Link", url=link)] for res, link in links.items()]
        await searching_msg.edit_text(f"**`{query}`**-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá:", reply_markup=InlineKeyboardMarkup(buttons), disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error in search_handler: {e}")
        await searching_msg.edit_text("‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")


# --- Threading and Main Execution ---
class WebServer(threading.Thread):
    def __init__(self, app):
        threading.Thread.__init__(self)
        self.server = make_server('0.0.0.0', PORT, app)
        self.ctx = app.app_context()
        self.ctx.push()

    def run(self):
        logger.info(f"Flask Web Server {PORT} ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        self.server.serve_forever()

    def shutdown(self):
        self.server.shutdown()

def run_bot():
    """Pyrogram ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    logger.info("Pyrogram ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    app.run()

if __name__ == "__main__":
    # ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    web_server_thread = WebServer(flask_app)
    web_server_thread.start()
    
    # ‡¶Æ‡ßÇ‡¶≤ ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    run_bot()
    
    # ‡¶¨‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶≤‡ßá ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡¶ì ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ
    web_server_thread.shutdown()
